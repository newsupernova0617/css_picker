# CSS Picker Backend - Docker Compose Configuration
version: '3.8'

services:
  # Flask Application with Gunicorn
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: csspicker-app
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - GUNICORN_WORKERS=4
      - LOG_LEVEL=info
    env_file:
      - ../.env.docker
    volumes:
      - ../logs:/var/log/csspicker:rw
      - app_temp:/tmp
    networks:
      - csspicker-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: csspicker-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/conf.d:/etc/nginx/conf.d:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - ../static:/var/www/static:ro
      - nginx_cache:/var/cache/nginx
      - ../logs/nginx:/var/log/nginx:rw
    networks:
      - csspicker-network
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: csspicker-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - csspicker-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # Log aggregation (optional)
  logrotate:
    image: linkyard/docker-logrotate
    container_name: csspicker-logrotate
    restart: unless-stopped
    volumes:
      - ../logs:/logs:rw
      - ../logrotate.conf:/etc/logrotate.d/app:ro
    environment:
      - CRON_SCHEDULE=0 2 * * *  # Run at 2 AM daily
    networks:
      - csspicker-network

networks:
  csspicker-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  app_temp:
    driver: local